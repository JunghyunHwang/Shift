<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/style.css">
    <title>Shift</title>
</head>
<body>
    <div class="top">
        <h1><a href="/">SHIFT</a></h1>
        <nav>
            <ul>
                <li><a href="/setting">근무설정</a></li>
                <li><a href="/auth/logout">로그아웃</a></li>
            </ul>
        </nav>
    </div>
    <div class="main">
        <div id="upload">
            <input type="file" id="upload_file" multiple accept=".xlsx">
        </div>

        <div id="thisWeek"></div>

        <div class="table-shift"></div>
    </div>
    <div class="bottom">
        {{!-- Ja_Hwang. all rights reserved --}}
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.14.3/xlsx.full.min.js"></script>
    <script>
        let shift = {};
        let workTypes = [];
        let workTypesweekend = [];
        let thisWeek = [];

        function renderDateButton(date)
        {
            let todayWorker = {};

            for(const dayOfWeek in shift)
            {
                if(shift[dayOfWeek][0].day === date)
                {
                    switch(dayOfWeek)
                    {
                        case "sat":
                            for(const work of workTypesweekend)
                            {
                                todayWorker[work.workName] = [];
                            }
                            break;
                        case "sun":
                            for(const work of workTypesweekend)
                            {
                                todayWorker[work.workName] = [];
                            }
                            break;
                        default:
                            for(const work of workTypes)
                            {
                                todayWorker[work.workName] = [];
                            }
                            break;
                    }

                    for(const workName in todayWorker)
                    {
                        for(const work of shift[dayOfWeek])
                        {
                            if(workName === work.workName)
                            {
                                todayWorker[workName].push(work);
                            }
                        }
                    }
                }
            }

            renderingTable(todayWorker);
        }

        function createDate()
        {
            uploadFile.remove();
            let week = document.getElementById('thisWeek');
            
            if(week.textContent)
            {
                week.textContent = null;
            }

            for(let i = 0; i < thisWeek.length; i++)
            {
                let date = document.createElement('button');
                date.textContent = thisWeek[i];
                date.classList.add('thisWeek_date');
                week.append(date);
            }

            let classDate = document.querySelectorAll('.thisWeek_date');

            for(let i = 0; i < classDate.length; i++)
            {
                classDate[i].addEventListener('click', () =>
                {
                    renderDateButton(classDate[i].textContent);
                });
            }
        }

        function renderingTable(todayWorker)
        {
            let tableLen = 0;
            console.log(todayWorker);

            for(const work in todayWorker)
            {
                if(todayWorker[work].length > tableLen)
                {
                    tableLen = todayWorker[work].length;
                }
            }
            
            let isItTable = document.querySelector('.table-shift__table');

            if(isItTable)
            {
                isItTable.remove();
            }

            const root = document.querySelector('.table-shift');
            const table = document.createElement('table');
        
            table.classList.add('table-shift__table');
            root.append(table);

            // Draw table
            let tableHeaders = "<thead>";

            for(const workName in todayWorker)
            {
                tableHeaders += `<th class="work_name" colspan=3>${workName}</th>`;
            }

            tableHeaders += "</thead>";
            table.innerHTML = tableHeaders;
            
            let tableBody = "<tbody><tr class='header'>";

            let numberOfWorkTypes = Object.keys(todayWorker).length;
            for(let i = 0; i < numberOfWorkTypes; i++)
            {
                tableBody += `
                <td class="header_time">시간</td>
                <td class="header_name">이름</td>
                <td class="header_sign_here">서명</td>
                `;
            }

            tableBody += "</tr></tbody>";
            table.innerHTML += tableBody;

            for(let i = 0; i < tableLen; i++)
            {
                let row = "<tr>"
                for(const work in todayWorker)
                {
                    if(todayWorker[work][i] === undefined)
                    {
                        row += `
                        <td class="empty" colspan=3></td>
                        `;
                    }
                    else
                    {
                        row += `
                        <td class="time">${todayWorker[work][i].time}</td>
                        <td class="name">${todayWorker[work][i].who}</td>
                        <td class="sign_here"></td>
                        `;
                    }
                }
                row += "</tr>";
                table.querySelector('tbody').insertAdjacentHTML('beforeend', row);
            }
        }

        let uploadFile = document.getElementById('upload_file');
        let membersData = [];

        uploadFile.addEventListener('change', (e) =>
        {
            let files = e.target.files;
            let f;
            let temp = [];
            let members = [];
            
            for(let i = 0; i < files.length; i++)
            {
                f = files[i];
                let reader = new FileReader();

                reader.onload = (e) =>
                {
                    let data = e.target.result;

                    let workbook = XLSX.read(data, {type: 'binary'});

                    workbook.SheetNames.forEach(function(item, index, array)
                    {
                        const membersData = XLSX.utils.sheet_to_json(workbook.Sheets[item]);

                        if(!temp.length)
                        {
                            temp = membersData;
                        }
                        else if(membersData > temp)
                        {
                            for(const tempMember of temp)
                            {
                                for(const member of membersData)
                                {
                                    if(member.name === tempMember.name)
                                    {
                                        members.push(Object.assign(member, tempMember));
                                        let cutNum = membersData.indexOf(member);
                                        membersData.splice(cutNum, 1);
                                        break;
                                    }
                                    else
                                    {
                                        continue;
                                    }
                                }
                            }

                            for(const member of membersData)
                            {
                                members.push(member);
                            }
                            console.log(members);
                            getData(members);
                        }
                        else
                        {
                            for(const member of membersData)
                            {
                                for(const tempMember of temp)
                                {
                                    if(member.name === tempMember.name)
                                    {
                                        members.push(Object.assign(member, tempMember));
                                        let cutNum = temp.indexOf(tempMember);
                                        temp.splice(cutNum, 1);
                                        break;
                                    }
                                    else
                                    {
                                        continue;
                                    }
                                }
                            }

                            for(const tempMember of temp)
                            {
                                members.push(tempMember);
                            }
                            console.log(members);

                            getData(members);
                        }
                    });
                };

                reader.readAsBinaryString(f);
            }
        });

        const api_url = '/api/{{user}}';

        async function getData(membersData)
        {
            const options = 
            {
                method: 'POST',
                headers:
                {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(membersData)
            };
            const response = await fetch(api_url, options);
            const shiftData = await response.json();
            
            thisWeek = shiftData.week;
            shift = shiftData.shift;
            console.log(shift);
            workTypes = shiftData.work.workTypes; // 개수 많을걸 [0]으로
            workTypesweekend = shiftData.work.workTypesWeekend;
            createDate();
        }
    </script>
    </body>
</html>